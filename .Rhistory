<<<<<<< HEAD
map_theme()
df.LISA %>%
ggplot(aes(fill=p_value)) +
geom_sf(color=NA) +
scale_fill_manual(values=c(palette_hero, palette_hero_faded, palette_water, "#cccccc"),
name = "P-Value") +
map_theme()
df.LISA %>%
ggplot(aes(fill=p_value)) +
geom_sf(color="#FFFFFF", size=0.5) +
scale_fill_manual(values=c(palette_hero, palette_hero_faded, palette_water, "#dddddd"),
name = "P-Value") +
map_theme()
df.LISA %>%
ggplot(aes(fill=p_value)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values=c(palette_hero, palette_hero_faded, palette_water, "#dddddd"),
name = "P-Value") +
map_theme()
# categorized p-value map
?quadrant
# categorized p-value map
?vector
quadrant<-vector(mode='numeric', length=323)
head(LISA)
LISA[,1]
LISA
mean_value = mean(df$md_housing_value, na.rm=TRUE)
mean_lisa = mean(LISA$li, na.rm=TRUE)
LISA
mean_lisa = mean(LISA$Ii, na.rm=TRUE)
mean_lisa = mean(LISA[,1], na.rm=TRUE)
mean_lisa
df.LISA
df.LISA = df.LISA %>%
mutate(category =
case_when(md_housing_value >= mean_value & Ii >= mean_lisa ~ "High-High",
md_housing_value >= mean_value & Ii < mean_lisa ~ "High-Low",
md_housing_value < mean_value & Ii >= mean_lisa ~ "Low-High",
TRUE ~ "Low-Low"),
category = factor(category,
levels = c("High-High", "High-Low", "Low-High", "Low-Low")))
df.LISA
df.LISA = df.LISA %>%
mutate(category =
case_when(Pr.z....E.Ii.. > 0.05 ~ "Insignificant",
md_housing_value >= mean_value & Ii >= mean_lisa ~ "High-High",
md_housing_value >= mean_value & Ii < mean_lisa ~ "High-Low",
md_housing_value < mean_value & Ii >= mean_lisa ~ "Low-High",
TRUE ~ "Low-Low"),
category = factor(category,
levels = c("High-High", "High-Low", "Low-High", "Low-Low")))
df.LISA = df.LISA %>%
mutate(category =
case_when(Pr.z....E.Ii.. > 0.05 ~ "Insignificant",
md_housing_value >= mean_value & Ii >= mean_lisa ~ "High-High",
md_housing_value >= mean_value & Ii < mean_lisa ~ "High-Low",
md_housing_value < mean_value & Ii >= mean_lisa ~ "Low-High",
TRUE ~ "Low-Low"),
category = factor(category,
levels = c("High-High", "High-Low", "Low-High", "Low-Low", "Insignificant")))
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf() +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"))
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"),
name = "Categories") +
map_theme
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"),
name = "Categories") +
map_theme()
hl.plot<-function(df, listw){
local<-localmoran(x=df$md_housing_value, listw=listw, zero.policy = FALSE)
quadrant<-vector(mode='numeric', length=323)
m.prop<-df$md_housing_value - mean(df$md_housing_value)
m.local<-local[,1]-mean(local[,1])
signif<-0.05
quadrant[m.prop >0 & m.local>0]<-4 #high md_housing_value, high clustering
quadrant[m.prop <0 & m.local<0]<-1 #low md_housing_value, low clustering
quadrant[m.prop <0 & m.local>0]<-2 #low md_housing_value, high clustering
quadrant[m.prop >0 & m.local<0]<-3 #high md_housing_value, low clustering
quadrant[local[,5]>signif]<-0
brks <- c(0,1,2,3,4)
colors <- c("grey","light blue",'blue','pink',"red")
plot<-plot(df %>% dplyr::select(bg_id),border="gray90",lwd=1.0,col=colors[findInterval(quadrant,brks,all.inside=FALSE)])
}
hl.plot(df, queenlist)
hl.plot(df, queenlist)
legend("bottomright",legend=c("insignificant","low-high","low-low","high-low","high-high"),
fill=c("grey", "light blue", "blue", "pink", "red"),bty="n", cex = 0.5)
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"),
name = "Categories") +
map_theme()
# Then check to see whether the Moran’s I value is significant (using 999 permutations). Take a screenshot of your results to presentin your report (Moran’s I value for the sample, histogram of Moran’s I values forthe permutations, and the p-value that you obtain will need to be included).
moranMC<-moran.mc(df$md_housing_value, queenlist, nsim=999, alternative="two.sided")  #We use 999 permutations
# Plot the hypothetical Moran's Is under the 999 permutations and plot the observed moran's I
ggplot(as.data.frame(moranMC$res[c(1:999)]), aes(moranMC$res[c(1:999)])) +
geom_histogram(binwidth = 0.002, fill = palette_hero_faded) +
# Observed Moran's I
geom_vline(aes(xintercept = morans_i), color = palette_hero, size = 1) +
labs(x="Moran's I under 999 permutations", y="Count", title = "Permutated and Observed Moran's I") +
annotate("text", x=0.58, y=10, label = "Observed\nMoran's I:\n" %>% paste0(morans_i %>% round(2)),
hjust = 0) +
plot_theme()
#Create Moran plot (lagged value against observed value)
df$lag_housing_value = lag.listw(queenlist, df$md_housing_value)
ggplot(df, aes(x=md_housing_value, y=lag_housing_value)) +
geom_point(color=palette_hero_faded, size=0.5) +
geom_smooth(method = "lm", color=palette_hero) +
labs(x="Median Housing Value", y="Lagged Median Housing Value (Queen)",
title="Median Housing Value Is Highly Spatially Autocorrelated") +
plot_theme()
#Run local moran's I (LISA)
LISA<-localmoran(df$md_housing_value, queenlist)
# Resulting an sf stating Local Moran's Is
df.LISA <-cbind(df, as.data.frame(LISA))
# map the p-value districution
df.LISA = df.LISA %>%
mutate(p_value =
case_when(Pr.z....E.Ii.. < 0.001 ~ "0.000 to 0.001",
Pr.z....E.Ii.. < 0.010 ~ "0.001 to 0.010",
Pr.z....E.Ii.. < 0.050 ~ "0.010 to 0.050",
TRUE ~ "0.050 to 1.000"),
p_value = factor(p_value,
levels = c("0.000 to 0.001",
"0.001 to 0.010",
"0.010 to 0.050",
"0.050 to 1.000")))
df.LISA %>%
ggplot(aes(fill=p_value)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values=c(palette_hero, palette_hero_faded, palette_water, "#dddddd"),
name = "P-Value") +
map_theme()
# categorized p-value map
mean_value = mean(df$md_housing_value, na.rm=TRUE)
mean_lisa = mean(LISA[,1], na.rm=TRUE)
df.LISA = df.LISA %>%
mutate(category =
case_when(Pr.z....E.Ii.. > 0.05 ~ "Insignificant",
md_housing_value >= mean_value & Ii >= mean_lisa ~ "High-High",
md_housing_value >= mean_value & Ii < mean_lisa ~ "High-Low",
md_housing_value < mean_value & Ii >= mean_lisa ~ "Low-High",
TRUE ~ "Low-Low"),
category = factor(category,
levels = c("High-High", "High-Low", "Low-High", "Low-Low", "Insignificant")))
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"),
name = "Categories") +
map_theme()
View(df.LISA)
fit <- lm(md_housing_value_log ~ pct_vacant + pct_single
+ pct_bachelor + hh_poverty_log,
data = df %>% st_drop_geometry())
fit <- lm(md_housing_value_log ~ pct_vacant + pct_single
+ pct_bachelor + n_poverty_log,
data = df %>% st_drop_geometry())
summary(fit)
# Breusch-Pagan Test
install.packages("lmtest")
library(lmtest)
# Breusch-Pagan Test
bptest(fit)
# Breusch-Pagan Test
bptest(fit, studentize=FALSE)
# Koenker-Bassett Test
bptest(fit, studentize=TRUE)
# White test
white_test(fit)
install.packages("whitestrap")
library(whitestrap)
# White test
white_test(fit)
install.packages("tseries")
library(tseries)
jarque.bera.test(fit)
jarque.bera.test(fit$residuals)
# First standardize the OLS regression residuals
fit_standardized = rstandard(fit)
fit_standardized
?rstandard
# First standardize the OLS regression residuals
res_standardized = rstandard(fit)
# Then get the lagged residuals
res_lag = lag.listw(queenlist, res_standardized)
as.data.frame(c(res_standardized, res_lag))
cbind(res_standardized, res_lag)
cbind(res_standardized, res_lag) %>%
as.data.frame()
cbind(res_standardized, res_lag) %>%
as.data.frame() %>%
ggplot(aes(x=res_lag, y=res_standardized)) +
geom_point() +
plot_theme()
cbind(res_standardized, res_lag) %>%
=======
residuals_lag = lag.listw(queenlist, residuals)
cbind(residuals, residuals_lag) %>%
>>>>>>> aa46b8ee26c4a827a087f995ec2660c7ddd5aa0d
as.data.frame() %>%
ggplot(aes(x=residuals_lag, y=residuals)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
labs(x="Lagged residuals", y="Standardized residuals") +
plot_theme()
library(ggmisc)
library(ggpmisc)
residuals = lag_reg$residuals %>% scale(.)
residuals_lag = lag.listw(queenlist, residuals)
cbind(residuals, residuals_lag) %>%
as.data.frame() %>%
ggplot(aes(x=residuals_lag, y=residuals)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
labs(x="Lagged residuals", y="Standardized residuals") +
plot_theme()
cbind(residuals, residuals_gwr) %>%
as.data.frame() %>%
ggplot(aes(x=residuals, y=residuals_gwr)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
labs(x="Residuals", y="Spatially Lagged Residuals") +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
plot_theme()
moran.mc(fit$residuals, queenlist, nsim=999, alternative="two.sided")
# First standardize the OLS regression residuals
res_standardized = rstandard(fit)
# Then get the lagged residuals
res_lag = lag.listw(queenlist, res_standardized)
# Plot
cbind(res_standardized, res_lag) %>%
as.data.frame() %>%
ggplot(aes(x=res_lag, y=res_standardized)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
labs(x="Lagged residuals", y="Standardized residuals") +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
plot_theme()
<<<<<<< HEAD
knitr::opts_chunk$set(echo=TRUE, cache=FALSE, results="hide", message=FALSE, warning=FALSE)
# Several libraries and util functions from my GitHub
source("https://raw.githubusercontent.com/Leejere/r-setup/main/r_setup.r")
library(tmap)
summary(queen)
morans_i
# Then check to see whether the Moran’s I value is significant (using 999 permutations). Take a screenshot of your results to presentin your report (Moran’s I value for the sample, histogram of Moran’s I values forthe permutations, and the p-value that you obtain will need to be included).
moranMC<-moran.mc(df$md_housing_value, queenlist, nsim=999, alternative="two.sided")  #We use 999 permutations
# Plot the hypothetical Moran's Is under the 999 permutations and plot the observed moran's I
ggplot(as.data.frame(moranMC$res[c(1:999)]), aes(moranMC$res[c(1:999)])) +
geom_histogram(binwidth = 0.002, fill = palette_hero_faded) +
# Observed Moran's I
geom_vline(aes(xintercept = morans_i), color = palette_hero, size = 1) +
labs(x="Moran's I under 999 permutations", y="Count", title = "Permutated and Observed Moran's I") +
annotate("text", x=0.58, y=10, label = "Observed\nMoran's I:\n" %>% paste0(morans_i %>% round(2)),
hjust = 0) +
plot_theme()
#Create Moran plot (lagged value against observed value)
df$lag_housing_value = lag.listw(queenlist, df$md_housing_value)
ggplot(df, aes(x=md_housing_value, y=lag_housing_value)) +
geom_point(color=palette_hero_faded, size=0.5) +
geom_smooth(method = "lm", color=palette_hero) +
labs(x="Median Housing Value", y="Lagged Median Housing Value (Queen)",
title="Median Housing Value Is Highly Spatially Autocorrelated") +
plot_theme()
#Run local moran's I (LISA)
LISA<-localmoran(df$md_housing_value, queenlist)
# Resulting an sf stating Local Moran's Is
df.LISA <-cbind(df, as.data.frame(LISA))
# map the p-value districution
df.LISA = df.LISA %>%
mutate(p_value =
case_when(Pr.z....E.Ii.. < 0.001 ~ "0.000 to 0.001",
Pr.z....E.Ii.. < 0.010 ~ "0.001 to 0.010",
Pr.z....E.Ii.. < 0.050 ~ "0.010 to 0.050",
TRUE ~ "0.050 to 1.000"),
p_value = factor(p_value,
levels = c("0.000 to 0.001",
"0.001 to 0.010",
"0.010 to 0.050",
"0.050 to 1.000")))
df.LISA %>%
ggplot(aes(fill=p_value)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values=c(palette_hero, palette_hero_faded, palette_water, "#dddddd"),
name = "P-Value") +
map_theme()
# categorized p-value map
mean_value = mean(df$md_housing_value, na.rm=TRUE)
mean_lisa = mean(LISA[,1], na.rm=TRUE)
df.LISA = df.LISA %>%
mutate(category =
case_when(Pr.z....E.Ii.. > 0.05 ~ "Insignificant",
md_housing_value >= mean_value & Ii >= mean_lisa ~ "High-High",
md_housing_value >= mean_value & Ii < mean_lisa ~ "High-Low",
md_housing_value < mean_value & Ii >= mean_lisa ~ "Low-High",
TRUE ~ "Low-Low"),
category = factor(category,
levels = c("High-High", "High-Low", "Low-High", "Low-Low", "Insignificant")))
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"),
name = "Categories") +
map_theme()
# Then check to see whether the Moran’s I value is significant (using 999 permutations). Take a screenshot of your results to presentin your report (Moran’s I value for the sample, histogram of Moran’s I values forthe permutations, and the p-value that you obtain will need to be included).
moranMC<-moran.mc(df$md_housing_value, queenlist, nsim=999, alternative="two.sided")  #We use 999 permutations
# Plot the hypothetical Moran's Is under the 999 permutations and plot the observed moran's I
ggplot(as.data.frame(moranMC$res[c(1:999)]), aes(moranMC$res[c(1:999)])) +
geom_histogram(binwidth = 0.002, fill = palette_hero_faded) +
# Observed Moran's I
geom_vline(aes(xintercept = morans_i), color = palette_hero, size = 1) +
labs(x="Moran's I under 999 permutations", y="Count", title = "Permutated and Observed Moran's I") +
annotate("text", x=0.58, y=10, label = "Observed\nMoran's I:\n" %>% paste0(morans_i %>% round(2)),
hjust = 0) +
plot_theme()
# map the p-value districution
df.LISA = df.LISA %>%
mutate(p_value =
case_when(Pr.z....E.Ii.. < 0.001 ~ "0.000 to 0.001",
Pr.z....E.Ii.. < 0.010 ~ "0.001 to 0.010",
Pr.z....E.Ii.. < 0.050 ~ "0.010 to 0.050",
TRUE ~ "0.050 to 1.000"),
p_value = factor(p_value,
levels = c("0.000 to 0.001",
"0.001 to 0.010",
"0.010 to 0.050",
"0.050 to 1.000")))
df.LISA %>%
ggplot(aes(fill=p_value)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values=c(palette_hero, palette_hero_faded, palette_water, "#dddddd"),
name = "P-Value") +
map_theme()
# categorized p-value map
mean_value = mean(df$md_housing_value, na.rm=TRUE)
mean_lisa = mean(LISA[,1], na.rm=TRUE)
df.LISA = df.LISA %>%
mutate(category =
case_when(Pr.z....E.Ii.. > 0.05 ~ "Insignificant",
md_housing_value >= mean_value & Ii >= mean_lisa ~ "High-High",
md_housing_value >= mean_value & Ii < mean_lisa ~ "High-Low",
md_housing_value < mean_value & Ii >= mean_lisa ~ "Low-High",
TRUE ~ "Low-Low"),
category = factor(category,
levels = c("High-High", "High-Low", "Low-High", "Low-Low", "Insignificant")))
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"),
name = "Categories") +
map_theme()
# categorized p-value map
mean_value = mean(df$md_housing_value, na.rm=TRUE)
mean_lisa = mean(LISA[,1], na.rm=TRUE)
df.LISA = df.LISA %>%
mutate(category =
case_when(Pr.z....E.Ii.. > 0.05 ~ "Insignificant",
md_housing_value >= mean_value & Ii >= mean_lisa ~ "High-High",
md_housing_value >= mean_value & Ii < mean_lisa ~ "High-Low",
md_housing_value < mean_value & Ii >= mean_lisa ~ "Low-High",
TRUE ~ "Low-Low"),
category = factor(category,
levels = c("High-High", "High-Low", "Low-High", "Low-Low", "Insignificant")))
df.LISA %>%
ggplot(aes(fill = category)) +
geom_sf(color="#FFFFFF", size=0.2) +
scale_fill_manual(values = c(palette_primary, palette_primary_faded,
palette_hero, palette_hero_faded,
"#dddddd"),
name = "Categories") +
map_theme()
library(lmtest)
# Breusch-Pagan Test
bptest(fit, studentize=FALSE)
```
library(lmtest)
# Breusch-Pagan Test
bptest(fit, studentize=FALSE)
library(lmtest)
# Breusch-Pagan Test
bptest(fit, studentize=FALSE)
library(lmtest)
# Breusch-Pagan Test
bptest(fit, studentize=FALSE)
# Koenker-Bassett Test
bptest(fit, studentize=TRUE)
library(whitestrap)
# White test
white_test(fit)
library(whitestrap)
# White test
white_test(fit)
# First standardize the OLS regression residuals
res_standardized = rstandard(fit)
# Then get the lagged residuals
res_lag = lag.listw(queenlist, res_standardized)
# Plot
cbind(res_standardized, res_lag) %>%
as.data.frame() %>%
ggplot(aes(x=res_lag, y=res_standardized)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
labs(x="Lagged residuals", y="Standardized residuals") +
plot_theme()
morans_i = morans_i_stats$I
# Generalist the queen list for moran's I
queenlist<-nb2listw(queen, style = 'W')
# calculate Global Moran'I
morans_i_stats = moran(df$md_housing_value, queenlist, n=length(queenlist$neighbours), S0=Szero(queenlist))
morans_i = morans_i_stats$I
morans_i_stats
res_fit = lm(res_standardized ~ res_lag)
summary(res_fit)
moran_res = moran.mc(fit$residuals, queenlist, nsim=999, alternative="two.sided")  #We use 999 permutations
moran_res = moran.mc(fit$residuals, queenlist, nsim=999, alternative="two.sided")  #We use 999 permutations
# Plot the hypothetical Moran's Is under the 999 permutations and plot the observed moran's I
ggplot(as.data.frame(moran_res$res[c(1:999)]), aes(moran_res$res[c(1:999)])) +
geom_histogram(binwidth = 0.002, fill = palette_hero_faded) +
# Observed Moran's I
geom_vline(aes(xintercept = morans_i), color = palette_hero, size = 1) +
labs(x="Moran's I under 999 permutations", y="Count", title = "Permutated and Observed Moran's I") +
annotate("text", x=0.58, y=10, label = "Observed\nMoran's I:\n" %>% paste0(morans_i %>% round(2)),
hjust = 0) +
plot_theme()
lag_reg = lagsarlm(md_housing_value_log ~ pct_vacant + pct_single
+ pct_bachelor + n_poverty_log,
data = df %>% st_drop_geometry(),
queenlist)
summary(lag_reg)
lag_reg = lagsarlm(md_housing_value_log ~ pct_vacant + pct_single
+ pct_bachelor + n_poverty_log,
data = df %>% st_drop_geometry(),
queenlist)
summary(lag_reg)
bptest.sarlm(lag_reg, studentize = FALSE)
install.packages("spatialreg")
library(spatialreg)
library(spatialreg)
bptest.sarlm(lag_reg, studentize = FALSE)
LR.sarlm(lag_reg, fit)
residuals = lag_reg$residuals %>% scale(.)
residuals_lag = lag.listw(queenlist, residuals)
cbind(residuals, residuals_lag) %>%
as.data.frame() %>%
ggplot(aes(x=residuals_lag, y=residuals)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
labs(x="Lagged residuals", y="Standardized residuals") +
plot_theme()
summary(lm(residuals ~ residuals_lag))
=======
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_continuous(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_continuous(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
?scale_fill_manual
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(values = my.cols,
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(values = my.cols,
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
map_list$coef_n_poverty_log_st
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_continuous(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)')
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant')
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more')
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing')
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant')
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more')
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing')
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6)
tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6,
legend.title.size = 1)
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6,
legend.title.size = 1,
title.size = 1)
tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6,
legend.title.size = 1,
title.size = 1)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
>>>>>>> aa46b8ee26c4a827a087f995ec2660c7ddd5aa0d
