residuals_lag = lag.listw(queenlist, residuals)
cbind(residuals, residuals_lag) %>%
as.data.frame() %>%
ggplot(aes(x=residuals_lag, y=residuals)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
labs(x="Lagged residuals", y="Standardized residuals") +
plot_theme()
library(ggmisc)
library(ggpmisc)
residuals = lag_reg$residuals %>% scale(.)
residuals_lag = lag.listw(queenlist, residuals)
cbind(residuals, residuals_lag) %>%
as.data.frame() %>%
ggplot(aes(x=residuals_lag, y=residuals)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
labs(x="Lagged residuals", y="Standardized residuals") +
plot_theme()
cbind(residuals, residuals_gwr) %>%
as.data.frame() %>%
ggplot(aes(x=residuals, y=residuals_gwr)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
labs(x="Residuals", y="Spatially Lagged Residuals") +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
plot_theme()
moran.mc(fit$residuals, queenlist, nsim=999, alternative="two.sided")
# First standardize the OLS regression residuals
res_standardized = rstandard(fit)
# Then get the lagged residuals
res_lag = lag.listw(queenlist, res_standardized)
# Plot
cbind(res_standardized, res_lag) %>%
as.data.frame() %>%
ggplot(aes(x=res_lag, y=res_standardized)) +
geom_point(color=palette_hero_faded, size=1) +
geom_smooth(method="lm", color=palette_hero) +
labs(x="Lagged residuals", y="Standardized residuals") +
stat_poly_eq(aes(label = paste(after_stat(eq.label),
after_stat(rr.label), sep = "*\", \"*"))) +
plot_theme()
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_continuous(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_continuous(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
?scale_fill_manual
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(values = my.cols,
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(values = my.cols,
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
map_list$coef_n_poverty_log_st
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_manual(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
# All the variables for the maps
choropleth_var_list = c("coef_n_poverty_log_st", "coef_pct_vacant_st", "coef_pct_single_st",
"coef_pct_bachelor_st")
# # Create a list of the real names
# choropleth_name_list = c()
# for(var in choropleth_var_list){
#   if(substring(var, nchar(var) - 6, nchar(var)) == "_log_st"){
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0("Log ",
#                                     var_dict[substring(var, 1, nchar(var) - 4)]))
#   } else {
#     choropleth_name_list = c(choropleth_name_list,
#                              paste0(var_dict[var]))
#   }
# }
library(RColorBrewer)
my.cols <- brewer.pal(8, "Blues")
choropleth_name_list <- c()
for (var in choropleth_var_list) {
var_short <- gsub("coef_", "", var)
var_short <- gsub("_st","", var_short)
choropleth_name_list = c(choropleth_name_list, paste0(var_dict[var_short]))
}
# Initialize map list
map_list <-  list()
# Make a long table
df_long <-  df %>%
dplyr::select(bg_id, choropleth_var_list) %>%
gather("Legend", "Value", -bg_id, -geometry)
# Make the plots
for(i in seq(1,length(choropleth_var_list))){
var = choropleth_var_list[i]
this_sf = df_long %>% filter(., Legend == var)
map_list[[var]] =
ggplot(this_sf) +
geom_sf(aes(fill = Value), color = NA) +
scale_fill_continuous(type = "viridis",
#labels = to_jenks_labels(this_df$Value, 5),
breaks = c(-6, -4, -2, 0, 2, 4, 6),
name = "") +
labs(title = choropleth_name_list[i]) +
map_theme(title_size = 9, tick_size = 7) +
theme(legend.position = c(0.8, 0.25))
}
do.call(grid.arrange, c(map_list, ncol = 2, top = "Choropleth Maps"))
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)')
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant')
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more')
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing')
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant')
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more')
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing')
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6)
tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6,
legend.title.size = 1)
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6,
legend.title.size = 1,
title.size = 1)
tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.6,
legend.title.size = 1,
title.size = 1)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
# plotting
coef_n_poverty_log<-tm_shape(df)+
tm_fill(col='coef_n_poverty_log_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of n_poverty_log',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Number of Poverty (Log)',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_vacant<-tm_shape(df)+
tm_fill(col='coef_pct_vacant_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_vacant',
palette='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of Housing Vacant',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_bachelor<-tm_shape(df)+
tm_fill(col='coef_pct_bachelor_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_bachelor',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of bachelor degree or more',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
coef_pct_single<-tm_shape(df)+
tm_fill(col='coef_pct_single_st', breaks=c(-Inf, -6, -4, -2, 0, 2, 4, 6, Inf), title='Standardized coefficient of pct_single',
palette ='-RdBu')+
tm_layout(frame=FALSE, title = 'Percentage of single family housing',
legend.text.size = 0.3,
legend.title.size = 0.5,
title.size = 0.5)
plot_list <-  list(coef_n_poverty_log, coef_pct_bachelor, coef_pct_single, coef_pct_vacant)
tmap_arrange(plot_list,  ncol=2)
